AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Serverless REST API for image resizing
Parameters:
  Env: 
    Type: String
    AllowedValues:
      - testing
      - prod
    Description: Environment in which the app will be deployed
  SharpLayer:
    Type: String
    Description: ARN of the Sharp layer. First install sharp-layer application from the Serverless Application Repository to obtain this ARN.
  MemorySize:
    Type: Number
    Default: 3008
    Description: Memory size to be used for your Lambda (Note that this setting will increase also the CPU power and price per second.)
    AllowedValues:
    - 128
    - 192
    - 256
    - 320
    - 384
    - 448
    - 512 
    - 576
    - 640
    - 704
    - 768
    - 832
    - 896
    - 960
    - 1024
    - 1088
    - 1152
    - 1216
    - 1280
    - 1344
    - 1408
    - 1472
    - 1536
    - 1600
    - 1664
    - 1728
    - 1792
    - 1856
    - 1920
    - 1984
    - 2048
    - 2112
    - 2176
    - 2240
    - 2304
    - 2368
    - 2432
    - 2496
    - 2560
    - 2624
    - 2688
    - 2752
    - 2816
    - 2880
    - 2944
    - 3008
Resources:
  ResizeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Image Resizing Lambda
      Handler: index.handler
      Runtime: nodejs14.x
      Timeout: 60
      CodeUri: dist/lambda1/bundle.zip
      MemorySize: !Ref MemorySize
      Layers:
        - !Ref SharpLayer
      Policies:
      - S3ReadPolicy:
          BucketName:
            Ref: BucketForImages
      - S3CrudPolicy:
          BucketName:
            Ref: BucketForImages
      - Statement:
        - Sid: InvokeSecondLambda
          Effect: Allow
          Action:
          - lambda:InvokeFunction
          - lambda:InvokeAsync
          Resource: '*'
      Events:
        AuthorizerApiRoot:
          Properties:
            Method: GET
            Path: '/{proxy+}'
            RestApiId: !Ref Api
          Type: Api
      Environment:
        Variables:
          IMAGE_BUCKET:
            Ref: BucketForImages
          SECOND_LAMBDA:
            Ref: SavingToS3Functions
  SavingToS3Functions:
    Type: AWS::Serverless::Function
    Properties:
      Description: Saving to S3 from lambda
      Handler: index.handler
      Runtime: nodejs14.x
      Timeout: 60
      CodeUri: dist/lambda2/bundle.zip
      MemorySize: !Ref MemorySize
      Layers:
        - !Ref SharpLayer
      Policies:
      - S3CrudPolicy:
          BucketName:
            Ref: BucketForImages
      Environment:
        Variables:
          IMAGE_BUCKET:
            Ref: BucketForImages
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: ImageResizerAPI
      StageName: !Ref Env
      DefinitionBody:
        swagger: "2.0"
        schemes:
        - "https"
        paths:
          '/{proxy+}':
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ResizeFunction.Arn}/invocations
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: aws_proxy
        x-amazon-apigateway-binary-media-types:
        - "*/*"
  BucketForImages:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: image-storing-s3-production
      